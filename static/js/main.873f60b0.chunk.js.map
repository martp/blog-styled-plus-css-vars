{"version":3,"sources":["styles/styles.themes.ts","styles/styles.base.ts","styles/styles.global.ts","components/theme/Theme.tsx","styles/components.base.ts","styles/components.layout.ts","components/radio/Radio.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["colors","light","dark","primary","themes","auto","background","backgroundSecondary","font","fontSecondary","base","colorScheme","fill","center","xs","sm","md","lg","xl","radius","GlobalStyles","createGlobalStyle","props","theme","ThemeContext","createContext","themeType","setTheme","Theme","children","useState","setThemeType","newContext","Provider","value","Title","styled","h1","Text","p","Fill","div","Input","input","CheckMark","span","Image","Label","label","Radio","autoFocus","checked","name","onChange","type","e","App","modeText","mode","Consumer","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.873f60b0.chunk.js","sourcesContent":["import { DefaultTheme } from 'styled-components';\n\nconst colors = {\n    light: 'var(--color-light-secondary)',\n    dark: 'var(--color-dark-secondary)',\n    primary: 'var(--color-primary)',\n}\n\nexport const themes = {\n    auto: {\n        colors: {\n            ...colors,\n            background: 'var(--background-color)',\n            backgroundSecondary: 'var(--background-color--secondary)',\n            font: 'var(--font-color)',\n            fontSecondary: `var(--font-color--secondary)`\n        }  \n    } as DefaultTheme,\n    light: {\n        colors: {\n            ...colors,\n            background: '#fff',\n            backgroundSecondary: 'rgba(0, 0, 0, 0.05)',\n            font: 'rgba(0, 0, 0, 0.8)',\n            fontSecondary: `rgba(0, 0, 0, 0.55)`\n        }  \n    } as DefaultTheme,\n    dark: {\n        colors: {\n            ...colors,\n            background: 'rgba(0, 0, 0, 0.9)',\n            backgroundSecondary: 'rgba(255, 255, 255, 0.05)',\n            font: 'rgba(255, 255, 255, 0.8)',\n            fontSecondary: `rgba(255, 255, 255, 0.55)`\n        }  \n    } as DefaultTheme\n};","export const base = {\n    media: {\n        colorScheme: {\n            dark: `(prefers-color-scheme: dark)`,\n            light: `(prefers-color-scheme: light)`\n        }\n    },\n    position: {\n        fill: `\n            width: 100vw;\n            height: 100vh;\n        `,  \n        center: `\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            > * {\n                text-align: center;\n            }\n        `,  \n    },\n    spacing: {\n        xs: `5px`,\n        sm: `10px`,\n        md: `15px`,\n        lg: `30px`,\n        xl: `45px`\n    },\n    borders: {\n        radius: '10px'\n    }\n};","import { createGlobalStyle } from 'styled-components';\nimport { base } from './styles.base';\n\nexport const GlobalStyles = createGlobalStyle`\n\n    :root {\n\n        --color-primary: #0b7bff;\n        --color-light: #ffffff;\n        --color-light-secondary: #f2f2f2;\n        --color-dark: #191919;\n        --color-dark-secondary: #252525;\n\n        --background-color: var(--color-light);\n        --background-color--secondary: var(--color-light-secondary);\n        --font-color: rgba(0, 0, 0, 0.8);\n        --font-color--secondary: rgba(0, 0, 0, 0.55);\n\n        @media ${base.media.colorScheme.dark} {\n            :root {\n                --background-color: var(--color-dark);\n                --background-color--secondary: var(--color-dark-secondary);\n                --font-color: rgba(255, 255, 255, 0.8);\n                --font-color--secondary: rgba(255, 255, 255, 0.55);\n            }\n        }\n        \n    }\n\n    body {\n        font-family: \"SF Pro Display\",\"SF Pro Icons\",\"Helvetica Neue\",\"Helvetica\",\"Arial\",sans-serif;\n        background-color: ${props => props.theme.colors.background};\n        color: ${props => props.theme.colors.font};\n    }\n    \n`;","import React, { ReactNode, useState, createContext } from 'react';\nimport { DefaultTheme } from 'styled-components';\nimport { themes } from '../../styles/styles.themes';\nimport { ThemeProvider } from 'styled-components';\nimport { GlobalStyles } from '../../styles/styles.global';\n\nexport type ThemeType = 'light' | 'dark' | 'auto';\n\nexport interface ThemeContextType {\n    themeType: ThemeType,\n    theme: DefaultTheme,\n    setTheme: (theme: ThemeType) => void\n}; \n\nexport const ThemeContext = createContext<ThemeContextType>({\n    themeType: 'auto',\n    theme: themes.auto,\n    setTheme: (theme: ThemeType) => {}\n}); \n\ninterface ThemeProps {\n    children: ReactNode\n}\n\nconst Theme = (props: ThemeProps) => {\n    const { children } = props;\n    const [theme, setTheme] = useState(themes.auto);\n    const [themeType, setThemeType] = useState<ThemeType>('auto');\n    const newContext: ThemeContextType = {\n        themeType: themeType,\n        theme: themes.auto,\n        setTheme: (theme: ThemeType) => {\n            setThemeType(theme);\n            if (theme === 'auto') {\n                setTheme(themes.auto)\n            } else if (theme === 'light') {\n                setTheme(themes.light)\n            } else if (theme === 'dark') {\n                setTheme(themes.dark)\n            }\n        }\n    }; \n    return (\n        <ThemeContext.Provider value={newContext}>\n            <ThemeProvider theme={theme}>\n                <GlobalStyles />\n                {children}\n            </ThemeProvider>\n        </ThemeContext.Provider>\n    );\n}; \n\nexport default Theme;","import styled from 'styled-components';\n \nexport const Title = styled.h1`\n    font-weight: bold;\n    text-align: center;\n    font-size: 80px;\n    line-height: 1.05;\n    font-weight: 600;\n    letter-spacing: -.015em;\n    margin-top: 0;\n    margin-bottom: 0;\n`;\n\nexport const Text = styled.p`\n    color: ${props => props.theme.colors.fontSecondary}\n`;\n","import styled from 'styled-components';\nimport { base } from './styles.base';\n\nexport const Fill = styled.div`\n    ${base.position.center}\n    ${base.position.fill}   \n`;","import React, {ChangeEvent} from 'react';\nimport styled from 'styled-components';\nimport { base } from '../../styles/styles.base';\n\nconst Input = styled.input`\n    user-select: none; \n    position: absolute;\n    opacity: 0;\n    cursor: pointer;\n    height: 0;\n    width: 0;\n`;\n\nconst CheckMark = styled.span`\n    position: absolute;\n    top: 0;\n    left: 0;\n    height: 100%;\n    width: 100%;\n`;\n\ninterface ImageProps {\n    background?: string;\n}\n\nconst Image = styled.span<ImageProps>`\n    display: block;\n    width: 70px;\n    height: 50px;\n    border: 3px solid transparent;\n    border-radius: ${base.borders.radius};\n    margin-bottom: ${base.spacing.sm};\n    background: ${props => props.background || props.theme.colors.backgroundSecondary}\n`;\n\nconst Label = styled.label`\n    display: inline-block;\n    position: relative;\n    cursor: pointer;\n    user-select: none;\n    padding: ${base.spacing.sm};\n    border-radius: ${base.borders.radius};\n    & ${Input}:checked ~ ${Image} { \n        border: 3px solid ${props => props.theme.colors.primary};\n    }\n`;\n\nexport interface FancyRadioProps {\n    name: string,\n    label: string,\n    value: string,\n    checked: boolean,\n    autoFocus?: boolean,\n    background?: string,\n    onChange: (event: ChangeEvent) => void\n}\n\nexport const Radio = (props: FancyRadioProps) => {\n    const { autoFocus, background, checked, name, label, value, onChange } = props;\n    return (\n        <Label>\n            <Input type=\"radio\" name={name} checked={checked}\n                autoFocus={autoFocus}\n                value={value} onChange={e => onChange(e)} />\n            <Image background={background} />\n            <CheckMark />\n            {label}\n        </Label>\n    );\n};","import { ThemeContext, ThemeType } from './components/theme/Theme';\nimport { Title, Text } from './styles/components.base';\nimport { Fill } from './styles/components.layout';\nimport { Radio } from './components/radio/Radio';\n\nfunction App() {\n  const modeText = (mode: ThemeType): string => {\n    switch(mode) {\n      case 'auto':\n        return 'Toggle light/dark mode in your OS';\n      case 'light':\n        return 'Force light mode';\n      case 'dark':\n        return 'Force dark mode';\n    }\n  } \n  return (\n    <Fill>\n      <ThemeContext.Consumer>\n        {({ themeType, theme, setTheme }) => (\n          <section>\n            <Title>\n              Themes\n            </Title>\n            <Text>{modeText(themeType)}</Text>\n            <Radio name=\"mode\" \n              label=\"Auto\" \n              value=\"auto\" autoFocus\n              checked={themeType === 'auto'}\n              onChange={() => setTheme('auto')} /> \n            <Radio name=\"mode\" \n              label=\"Light\" \n              value=\"light\" \n              background={theme.colors.light}\n              checked={themeType === 'light'}\n              onChange={() => setTheme('light')} />\n            <Radio name=\"mode\" \n              label=\"Dark\" \n              value=\"dark\" \n              background={theme.colors.dark}\n              checked={themeType === 'dark'}\n              onChange={() => setTheme('dark')} />\n          </section>\n        )}\n      </ThemeContext.Consumer>   \n    </Fill>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport Theme from './components/theme/Theme';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Theme>\n      <App />\n    </Theme>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}